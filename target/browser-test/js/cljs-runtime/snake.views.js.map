{"version":3,"sources":["snake/views.cljs"],"mappings":";AA0BA,yDAAA,zDAACA,+GAEA,gBAAAC,LAAKG;AAAL,AAAA,IAAAF,cAAAD;UAAA,AAAAE,4CAAAD,YAAA,IAAA,lEAAWG;QAAX,AAAAF,4CAAAD,YAAA,IAAA,hEAAeI;AAAf,AAAA,kDAAA,gDACa,AAACC,+CAAO,AAAA,8EAAKH,MAAMC,IAAI,WAAKG;AAAL,AAAQ,YAAA,JAAKA;IADjD,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,iFAAA,mFAAA,6DAAA,mFAAA,kFAAA,mFAAA,6DAAA,mFAAA,6EAAA,mFAAA,6DAAA,mFAAA,iFAAA,mFAAA,6DAAA,mFAAA,uGAAA,mFAAA,6DAAA,mFAAA;;AAWD,yDAAA,zDAACC,0HAEA,cAAAC,HAAKE;AAAL,AAAA,IAAAD,cAAAD;QAAA,AAAAP,4CAAAQ,YAAA,IAAA,hEAASL;YAAT,AAAAH,4CAAAQ,YAAA,IAAA,pEAAWL;AAAX,AACE,yDAAA,lDAACC,+CAAOK,6DAEA,WAAKC;AAAL,AACE,OAACC,cAAI,AAACC,4CACA,WAAKC;AAAL,AAAQ,2DAAA,mFAAA,vIAACC,kDAAUD,gJAAS,AAAA,gFAAMA,GAAG,AAAA,sFAAQJ;GAC7CC;;;AAGnB,oBAAA,pBAAMK,gDAAOC,IAAIC;AAAjB,AACE,IAAMC,IAAE,qFAAA,pFAAK,AAAA,6EAAIF;AAAjB,AACE,yDAAA,lDAACG,8CAAMH,mDAAOE;;AAElB,oBAAA,pBAAME,gDAAOJ,IAAIC;AAAjB,AACE,IAAMC,IAAE,qFAAA,pFAAK,AAAA,6EAAIF;AAAjB,AACE,yDAAA,lDAACG,8CAAMH,mDAAOE;;AAElB,oBAAA,pBAAMG,gDAAOL,IAAIC;AAAjB,AACE,IAAMC,IAAE,sFAAA,rFAAK,AAAA,8EAAIF;AAAjB,AACE,yDAAA,lDAACG,8CAAMH,oDAAOE;;AAElB,oBAAA,pBAAMI,gDAAON,IAAIC;AAAjB,AACE,IAAMC,IAAE,sFAAA,rFAAK,AAAA,8EAAIF;AAAjB,AACE,yDAAA,lDAACG,8CAAMH,oDAAOE;;AAGlB,AAqBA,wBAAA,kEAAA,2CAAA,iEAAA,2FAAA,2CAAA,iEAAA,2FAAA,2CAAA,iEAAA,2FAAA,2CAAA,iEAAA,3xBAAKK,wEAAWR,4GAAUO,iEAASD,0BACnBD,4GAAUC,iEAASC,0BACnBD,4GAAUD,iEAASL,0BACnBO,4GAAUP,iEAASK;AAGnC,yDAAA,zDAACd,0HAEA,cAAAkB,HAAKf;AAAL,AAAA,IAAAgB,cAAAD;QAAA,AAAAxB,4CAAAyB,YAAA,IAAA,hEAAStB;YAAT,AAAAH,4CAAAyB,YAAA,IAAA,pEAAWtB;AAAX,AACE,IAAMuB,OAAK,gBAAA,AAAA,wFAAIjB,xGAAWkB;IACpBC,KAAG,AAAA,6EAAA,AAAA,iFAAIF;IACPG,KAAG,AAAA,8EAAA,AAAA,iFAAIH;IACPI,KAAG,AAAA,6EAAA,AAAA,sFAAIrB;IACPsB,KAAG,AAAA,8EAAA,AAAA,sFAAItB;AAJb,AAKE,oBAAI,iBAAAuB,mBAAI,AAACC,oBAAU,+CAAA,WAAAC,1DAACC;AAAD,AAAS,yDAAAD,lDAACE,6CAAEV;GAAQ,AAACW,eAAK,AAAA,wFAAS5B;AAAlD,AAAA,oBAAAuB;AAAAA;;AACI,0BAAA,mBAAA,pCAAI,OAAA,NAAIJ,kBAAM,OAAA,NAAIC,kBAAM,CAAGD,KAAGE,SAAI,CAAGD,KAAGE;;;AAC9C,yDAAA,lDAAC3B,+CAAOK,8DAAY,WAAKN;AAAL,AAAA;;;AACpB,yDAAA,lDAACC,+CAAOK,8DAAY,WAAKN;AAAL,AAAA;;;;AAG3B,yDAAA,zDAACG,sHAEA,cAAAgC,HAAK7B;AAAL,AAAA,IAAA8B,cAAAD;QAAA,AAAAtC,4CAAAuC,YAAA,IAAA,hEAASpC;YAAT,AAAAH,4CAAAuC,YAAA,IAAA,pEAAWpC;AAAX,AACE,IAAMuB,OAAK,gBAAA,AAAA,wFAAIjB,xGAAWkB;IACpBC,KAAG,AAAA,6EAAA,AAAA,iFAAIF;IACPG,KAAG,AAAA,8EAAA,AAAA,iFAAIH;IACPc,WAAS,AAAA,qFAAQ/B;IACjBgC,YAAU,AAACN,+CAAO,WAAKO;AAAL,AAAQ,SAAK,AAACN,6CAAER,GAAG,AAAA,6EAAIc,SAAI,AAACN,6CAAEP,GAAG,AAAA,8EAAIa;GAAMF;AAJnE,AAKE,oBAAI,AAACP,oBAAUQ;AACb,IAAME,OAAK,eAAA,AAAA,wFAAIlC,vGAAWmC;IACpBC,gBACA,kDAAA,lDAACzC,+CAAOK,0DAEA,WAAKqC;AAAL,AAAU,OAACnC,cAAI,+CAAA,WAAAoC,1DAACC;AAAD,AAAS,oDAAAD,7CAACX,+DAAI,AAACT,gBAAMc;GAAYK;;AAJ9D,AAKE,oEAAA,7DAAC1C,+CAAOyC,+EAA0B,WAAKI;AAAL,AAAQ,OAACC,6CAAKD,EAAEN;;;AACpDlC;;;AAEP,yDAAA,zDAACH,2HAEA,cAAA6C,HAAK1C;AAAL,AAAA,IAAA2C,cAAAD;QAAA,AAAAnD,4CAAAoD,YAAA,IAAA,hEAASjD;YAAT,AAAAH,4CAAAoD,YAAA,IAAA,pEAAWjD;AAAX,AACE,IAAAkD,qBAAa,AAAC1B,gBAAM,AAAA,+FAAIlB;AAAxB,AAAA,oBAAA4C;AAAA,WAAAA,PAASC;AAAT,AACE,IAAMC,MAAI,AAAClB,eAAK,AAAA,+FAAI5B;IACd+C,iBAAe,kDAAA,lDAACpD,+CAAOK,oEAAe,WAAKN;AAAL,AAAQ,OAACQ,cAAI4C;;AADzD,AAEE,qEAAA,9DAACnD,+CAAOoD,yEAAuB,WAAK9C;AAAL,AAAa,OAACwC,6CAAKxC,OAAO4C;;;AAC3D7C;;;AAGL,4BAAA,5BAAMgD,gEAAeC,EAAEC;AAAvB,AACE,OAACxB,+CACA,WAAKjB;AAAL,AAAQ,OAACe,oBAAU,AAACE,+CACA,WAAKtB;AAAL,AAAQ,SAAK,AAACuB,6CAAE,AAAA,6EAAA,AAAA,iFAAIlB,IAAW,AAAA,6EAAA,AAAA,iFAAIL,UACtB,AAACuB,6CAAE,AAAA,8EAAA,AAAA,iFAAIlB,IAAW,AAAA,8EAAA,AAAA,iFAAIL;GACnC8C;GACpBD;;AAEH,+BAAA,/BAAME,sEAAkBlD,OAAOmD;AAA/B,AACE,OAAClD,cAAI,AAACC,4CACA,WAAKC;AAAL,AACE,IAAMK,IAAE,gCAAA,hCAACuC,0BAAcI,yFAAOhD;AAA9B,AACE,oBAAI,AAACoB,oBAAUf;AAAG,OAAC4C,uGAAMjD,EAAE,AAACc,gBAAMT;;AAAIL;;GAC1CH;;AAER,yDAAA,zDAACJ,gJAEA,cAAAyD,HAAKtD;AAAL,AAAA,IAAAuD,cAAAD;QAAA,AAAA/D,4CAAAgE,YAAA,IAAA,hEAAS7D;YAAT,AAAAH,4CAAAgE,YAAA,IAAA,pEAAW7D;AAAX,AACE,yDAAA,lDAACC,+CAAOK,6DAAW,WAAKC;AAAL,AAAa,OAACkD,6BAAiBlD,OAAO,AAAA,sFAAQD;;;AAEpE,yDAAA,zDAACH,2IAEA,cAAA2D,HAAKxD;AAAL,AAAA,IAAAyD,cAAAD;QAAA,AAAAjE,4CAAAkE,YAAA,IAAA,hEAAS/D;YAAT,AAAAH,4CAAAkE,YAAA,IAAA,pEAAW/D;AAAX,AACE,yDAAA,lDAACC,+CAAOK,2DAAU,WAAKoD;AAAL,AAAY,OAAClD,cAAI,AAAC8C,0BAAcI,MAAM,AAAA,wFAASpD;;;AAIpE,yDAAA,zDAACH,sHAEA,gBAAA6D,LAAKlE;AAAL,AAAA,IAAAmE,cAAAD;QAAA,AAAAnE,4CAAAoE,YAAA,IAAA,hEAAWjE;YAAX,AAAAH,4CAAAoE,YAAA,IAAA,pEAAajE;AAAb,AAAA,kDAAA,gDACO,mIAAA,nIAACC,+CACA,AAAA,8EAAKH,8DAEL,WAAKE;AAAL,AAAA,0FAAA,2CAAA,mDAAA,2CAAA,+CAAA,IAAA,gDAAA,YAAA,4EAAA,2CAAA,mDAAA,2CAAA,+CAAA,IAAA,gDAAA,YAAA,lRAAgCkB,oUACAD;;;AAIzC,yDAAA,zDAACd,0HAEC,cAAA+D,HAAK5D;AAAL,AAAA,IAAA6D,cAAAD;QAAA,AAAArE,4CAAAsE,YAAA,IAAA,hEAASnE;YAAT,AAAAH,4CAAAsE,YAAA,IAAA,pEAAWnE;AAAX,AAAA;;AAEF,yDAAA,zDAACG,yHAEA,cAAAiE,HAAK9D;AAAL,AAAA,IAAA+D,cAAAD;QAAA,AAAAvE,4CAAAwE,YAAA,IAAA,hEAASrE;YAAT,AAAAH,4CAAAwE,YAAA,IAAA,pEAAWrE;AAAX,AAEE,IAAMsE,MAAI,qEAAA,0FAAA,9JAAChE,mCAAAA,8GAAAA,nBAAWkB,0FAAAA;IAEjB2B,OAAI,mDAAA,nDAAClD,+CAAOqE,uDAAS,WAAKtE;AAAL,AAAA,0FAAA;;AAF1B,AAOE,yDAAA,lDAACC,+CAAOK,2DAAU,WAAKN;AAAL,AAAQsE;;;AAO/B,yDAAA,zDAACnE,yHAEA,cAAAoE,HAAKjE;AAAL,AAAA,IAAAkE,cAAAD;QAAA,AAAA1E,4CAAA2E,YAAA,IAAA,hEAASxE;YAAT,AAAAH,4CAAA2E,YAAA,IAAA,pEAAWxE;AAAX,AACE,yDAAA,lDAACC,+CAAOK,6DAOA,WAAKN;AAAL,AAAA,0FAAA,2CAAA,mDAAA,2CAAA,+CAAA,IAAA,gDAAA,YAAA,kDAEgCY;;;AAQ3C,yDAAA,zDAAClB,8GAEA,gBAAA+E,LAAK3E;AAAL,AAAA,IAAA4E,cAAAD;UAAA,AAAA5E,4CAAA6E,YAAA,IAAA,lEAAW3E;QAAX,AAAAF,4CAAA6E,YAAA,IAAA,hEAAe1E;AAAf,AAAA,kDAAA,gDACa,AAACC,+CAAO,AAAA,8EAAKH,MAAMC,IAAI,WAAKC;AAAL,AAAA;IADpC,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,2EAAA,mFAAA,6DAAA,mFAAA;;AAKD,yDAAA,zDAACN,oHAEA,gBAAAiF,LAAK7E;AAAL,AAAA,IAAA8E,cAAAD;UAAA,AAAA9E,4CAAA+E,YAAA,IAAA,lEAAW7E;QAAX,AAAAF,4CAAA+E,YAAA,IAAA,hEAAe5E;AAAf,AAAA,kDAAA,gDACa,mIAAA,nIAACC,+CAAO,AAAA,8EAAKH,2DAAa,WAAKI;AAAL,AAAQ,QAAGA,IAAEA;;;AAIrD,yDAAA,zDAACR,oHAEA,gBAAAmF,LAAK/E;AAAL,AAAA,IAAAgF,cAAAD;UAAA,AAAAhF,4CAAAiF,YAAA,IAAA,lEAAW/E;QAAX,AAAAF,4CAAAiF,YAAA,IAAA,hEAAe9E;AAAf,AAAA,kDAAA,gDACa,mIAAA,nIAACC,+CAAO,AAAA,8EAAKH,2DAAa,WAAKI;AAAL,AAAQ,QAAGA,IAAEA;;;AAOrD,wBAAA,xBAAM6E;AAAN,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,uDAAA,uEAAA,mFAAA,kDAAA,qBAAA,oFAAA,gDAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAI8B,8BAAA,mFAAA,1GAACC;WAJ/B,uBAAA,IAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAO8B,8BAAA,mFAAA,1GAACA;WAP/B,oCAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAQ8B,8BAAA,mFAAA,1GAACA;WAR/B,6BAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAS8B,8BAAA,mFAAA,1GAACA;WAT/B,2BAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAU8B,8BAAA,mFAAA,1GAACA;WAV/B,6BAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAW8B,8BAAA,mFAAA,1GAACA;WAX/B,oCAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAY8B,8BAAA,mFAAA,1GAACA;WAZ/B,+BAAA,YAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAe8B,8BAAA,mFAAA,1GAACA;WAf/B,4BAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAgB8B,8BAAA,mFAAA,1GAACA;WAhB/B,6BAAA,mFAAA,gDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAiB8B,8BAAA,mFAAA,1GAACA;WAjB/B;;AAwBA,yBAAA,zBAAMC;AAAN,AACE,IAAMC,OAAK,sDAAA,mFAAA,zIAACC;AAAZ,AAAA,4GAAA,iQAAA,8KAAA,uDAAA,wDAAA,hjBACGC,sEACO,EAAA,GAAAC,cAAA,KAAA,2CAAA,sDAAA,mBAAA,oDAAA,oEACA,CAAA,0DAAA,AAAAC,uBAAA,PAAoBJ,mNAEpB,AAACK;;AAEb,iCAAA,jCAAMC;AAAN,AAAA,gHAAA,iQAAA,uDAAA,mBAAA,6DAAA,9ZACGC,0EACU,EAAA,GAAAJ,cAAA,KAAA,2CAAA,sDAAA,mBAAA,oDAAA;AAFb,AAIc,8BAAA,mFAAA,mFAAA,7LAACL;;;AAEf,yBAAA,zBAAMU;AAAN,AAAA,4GAAA,iQAAA,iDAAA,MAAA,6DAAA,mFAAA,1dACGC,sEACU,EAAA,GAAAN,cAAA,KAAA,2CAAA,sDAAA,mBAAA,oDAAA,uSAIEN;;AAEf,AAAAa,gEAAA,iEAAA;AAAA,AAAA,0FAAyCF;;AAIzC,0BAAA,1BAAMG;AAAN,AAAA,4GAAA,iQAAA,uDAAA,0BAAA,uDAAA,3ZACGT,sEACO,EAAA,GAAAC,cAAA,KAAA,2CAAA,sDAAA,mBAAA,oDAAA;;AAIV,gCAAA,hCAAMS;AAAN,AAAA,gHAAA,iQAAA,uDAAA,kBAAA,6DAAA,7ZACGL,0EACU,EAAA,GAAAJ,cAAA,KAAA,2CAAA,sDAAA,mBAAA,oDAAA;AAFb,AAIc,8BAAA,mFAAA,mFAAA,7LAACL;;;AAEf,0BAAA,1BAAMe;AAAN,AAAA,4GAAA,iQAAA,iDAAA,MAAA,6DAAA,mFAAA,mHAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,uDAAA,wBAAA,/6BACGJ,sEACU,EAAA,GAAAN,cAAA,KAAA,2CAAA,sDAAA,mBAAA,oDAAA,uSAEEQ,qdAECC;;AAEhB,AAAAF,gEAAA,kEAAA;AAAA,AAAA,0FAA0CG;;AAG1C,yBAAA,zBAAMC;AAAN,AACE,IAAMC,eAAa,sDAAA,mFAAA,zIAACd;AAApB,AAAA,4GAAA,iQAAA,yDAAA,OAAA,6DAAA,hZACGQ,sEACU,EAAA,GAAAN,cAAA,KAAA,2CAAA,sDAAA,mBAAA,oDAAA,6NAEC,kDAAA,AAAAC,lDAACM,kEAAeK","names":["re_frame.core.reg_event_fx","p__176119","vec__176121","cljs.core.nth","cofx","act","_","cljs.core.update","v","re_frame.core.reg_event_db","p__176127","vec__176131","db","points","cljs.core/vec","cljs.core.map","p","cljs.core.update_in","snake.views/inc-x","pnt","frm","r","cljs.core.assoc","snake.views/dec-x","snake.views/inc-y","snake.views/dec-y","snake.views/turns-map","p__176150","vec__176151","head","cljs.core/first","hx","hy","fx","fy","or__5045__auto__","cljs.core/not-empty","p1__176149#","cljs.core.filter","cljs.core._EQ_","cljs.core/rest","p__176160","vec__176161","foods-db","head-food","f","tail","cljs.core/last","eated-food-db","fds","p1__176159#","cljs.core.remove","q","cljs.core.conj","p__176168","vec__176169","temp__5802__auto__","new","rst","new-grow-queue","snake.views/remove-absent","t","e","snake.views/merge-with-match","turns","cljs.core.merge","p__176172","vec__176173","p__176176","vec__176178","p__176184","vec__176186","p__176192","vec__176194","p__176200","vec__176201","cur","p__176216","vec__176217","p__176224","vec__176226","p__176232","vec__176234","p__176240","vec__176241","snake.views/snake-app","re-frame.core/dispatch","snake.views/home-title","name","re_frame.core.subscribe","re-com.core/title","js/goog.DEBUG","cljs.core/deref","snake.styles/level1","snake.views/link-to-about-page","re-com.core/hyperlink","snake.views/home-panel","re-com.core/v-box","snake.routes/panels","snake.views/about-title","snake.views/link-to-home-page","snake.views/about-panel","snake.views/main-panel","active-panel"],"sourcesContent":["(ns snake.views\n  (:require\n   [re-frame.core :as re-frame]\n   [re-com.core :as re-com :refer [at]]\n   [snake.styles :as styles]\n   [snake.events :as events]\n   [snake.routes :as routes]\n   [snake.subs :as subs]))\n\n;; SNAKE\n\n;; 1. Data flow. Steps:\n;; move [ X ]\n;; is lose? [ X ]\n;; grow tail from tail queue [ X ]\n;; need push new coord to grow tail queue? [ X ]\n\n;; update coord according turns queue [ X ]\n;; need remove from turns queue [ X ]\n\n;; 2. Compilation from 1. to flow [   ]\n;; 3. Test combination turns & grow [   ]\n;; 4. Snake (rename points -> snake) array with head on 0idx [   ]\n\n;; Move\n\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :move\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) act (fn [v] (inc v)))\n    :fx       [[:dispatch [:update-crd]]\n               [:dispatch [:snake-grow]]\n               [:dispatch [:eat-food]]\n               [:dispatch [:check-lose]]\n               [:dispatch [:update-crd-with-turns]]\n               [:dispatch [:remove-vacant-turns]]]}))\n\n;; Update coordinates\n\n(re-frame/reg-event-db\n :update-crd\n (fn [db [_ _]]\n   (update db\n           :points\n           (fn [points]\n             (vec (map\n                   (fn [p] (update-in p [:crd] (:nxt p) (:frame db)))\n                   points))))))\n\n;; - solid field\n(defn inc-x [pnt frm]\n  (let [r (inc (:x pnt))]\n    (assoc pnt :x r)))\n\n(defn dec-x [pnt frm]\n  (let [r (dec (:x pnt))]\n    (assoc pnt :x r)))\n\n(defn inc-y [pnt frm]\n  (let [r (inc (:y pnt))]\n    (assoc pnt :y r)))\n\n(defn dec-y [pnt frm]\n  (let [r (dec (:y pnt))]\n    (assoc pnt :y r)))\n\n;; - close field\n(comment\n  (defn inc-x [pnt frm]\n    (let [t (inc (:x pnt))\n          r (if (> t (:x frm)) 0 t)]\n      (assoc pnt :x r)))\n\n  (defn dec-x [pnt frm]\n    (let [t (dec (:x pnt))\n          r (if (< t 0) (:x frm) t)]\n      (assoc pnt :x r)))\n\n  (defn inc-y [pnt frm]\n    (let [t (inc (:y pnt))\n          r (if (> t (:y frm)) 0 t)]\n      (assoc pnt :y r)))\n\n  (defn dec-y [pnt frm]\n    (let [t (dec (:y pnt))\n          r (if (< t 0) (:y frm) t)]\n      (assoc pnt :y r))))\n\n(def turns-map {inc-x {:l dec-y :r inc-y}\n                dec-x {:l inc-y :r dec-y}\n                inc-y {:l dec-x :r inc-x}\n                dec-y {:l inc-x :r dec-x}})\n\n;; Check lose\n(re-frame/reg-event-db\n :check-lose\n (fn [db [_ _]]\n   (let [head (-> db :points first)\n         hx (-> head :crd :x)\n         hy (-> head :crd :y)\n         fx (-> db :frame :x)\n         fy (-> db :frame :y)]\n     (if (or (not-empty (filter #(= head %) (rest (:points db))))\n             (or (<= hx 0) (<= hy 0) (> hx fx) (> hy fy)))\n       (update db :is-lose (fn [_] true))\n       (update db :is-lose (fn [_] false))))))\n\n;; Grow\n(re-frame/reg-event-db\n :eat-food\n (fn [db [_ _]]\n   (let [head (-> db :points first)\n         hx (-> head :crd :x)\n         hy (-> head :crd :y)\n         foods-db (:foods db)\n         head-food (filter (fn [f] (and (= hx (:x f)) (= hy (:y f)))) foods-db)]\n     (if (not-empty head-food)\n       (let [tail (-> db :points last)\n             eated-food-db\n             (update db\n                     :foods\n                     (fn [fds] (vec (remove #(= % (first head-food)) fds))))]\n         (update eated-food-db :grow-queue (fn [q] (conj q tail))))\n       db))))\n\n(re-frame/reg-event-db\n :snake-grow\n (fn [db [_ _]]\n   (if-let [new (first (-> db :grow-queue))]\n     (let [rst (rest (-> db :grow-queue))\n           new-grow-queue (update db :grow-queue (fn [_] (vec rst)))]\n       (update new-grow-queue :points (fn [points] (conj points new))))\n     db)))\n\n;; Turns queue\n(defn remove-absent [t e]\n  (filter\n   (fn [r] (not-empty (filter\n                       (fn [p] (and (= (-> r :crd :x) (-> p :crd :x))\n                                    (= (-> r :crd :y) (-> p :crd :y))))\n                       e)))\n   t))\n\n(defn merge-with-match [points turns]\n  (vec (map\n        (fn [p]\n          (let [r (remove-absent turns [p])]\n            (if (not-empty r) (merge p (first r)) p)))\n        points)))\n\n(re-frame/reg-event-db\n :update-crd-with-turns\n (fn [db [_ _]]\n   (update db :points (fn [points] (merge-with-match points (:turns db))))))\n\n(re-frame/reg-event-db\n :remove-vacant-turns\n (fn [db [_ _]]\n   (update db :turns (fn [turns] (vec (remove-absent turns (:points db)))))))\n\n;;; re-frame\n\n(re-frame/reg-event-db             ;; -fx registration, not -db registration\n :add-turn\n (fn [cofx [_ _]]        ;; 1st argument is coeffects, instead of db\n   {:db (update\n         (:db cofx)\n         :turns\n         (fn [_] [{:crd {:x 3 :y 2} :nxt inc-y}\n                  {:crd {:x 3 :y 3} :nxt dec-x}]))}))\n\n\n\n(re-frame/reg-event-db\n  :add-turn-l\n  (fn [db [_ _]]))\n\n(re-frame/reg-event-db\n :add-turn-r\n (fn [db [_ _]]\n\n   (let [cur (db :points first)\n\n        new (update cur :crd (fn [_] [11] ) )\n\n         ]\n     ;(update db :turns (fn [v] (conj v (c cur))))\n\n     (update db :turns (fn [_] cur))\n\n     )))\n\n\n\n\n(re-frame/reg-event-db\n :add-point\n (fn [db [_ _]]\n   (update db\n           :points\n           ;conj {:crd {:x (rand-int 5) :y (rand-int 5)} :nxt (get [inc-y dec-y] (rand-int 2))}\n           ;conj {:crd {:x 1 :y 1} :nxt inc-x}{:crd {:x 2 :y 1} :nxt inc-x}\n           ;conj {:crd {:x 1 :y 1} :nxt inc-y}\n           ;conj {:crd {:x 1 :y 1} :nxt dec-y}\n\n           (fn [_] [\n                    ;{:crd {:x 2 :y 2} :nxt inc-x}\n                    {:crd {:x 1 :y 2} :nxt inc-x}\n\n                    #_{:crd {:x 6 :y 1} :nxt dec-x}\n                    #_{:crd {:x 7 :y 1} :nxt dec-x}]))))\n\n;;; exp\n\n;; chain - experiment\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :chain\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) act (fn [_] 3))\n    :fx       [[:dispatch [:chain-2]]\n               [:dispatch [:chain-3]]]}))\n\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :chain-2\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) :chain (fn [v] (+ v v)))\n     ;:fx       [[:dispatch [:add-turn-l3]]]\n    }))\n\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :chain-3\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) :chain (fn [v] (* v v)))\n     ;:fx       [[:dispatch [:do-something-else 3]]]\n    }))\n\n;; chain - experiment\n\n;;; snake view\n(defn snake-app []\n  [:div {:style {:color :black}}\n   [:h1 \"Snake game\"]\n   [:ol\n    [:li [:button {:on-click #(re-frame/dispatch [:move])} \"Move\"]]\n\n    \"-\"\n    [:li [:button {:on-click #(re-frame/dispatch [:update-crd])} \"Update coordinate\"]]\n    [:li [:button {:on-click #(re-frame/dispatch [:check-lose])} \"Check lose\"]]\n    [:li [:button {:on-click #(re-frame/dispatch [:eat-food])} \"Eat foot\"]]\n    [:li [:button {:on-click #(re-frame/dispatch [:snake-grow])} \"Snake grow\"]]\n    [:li [:button {:on-click #(re-frame/dispatch [:update-crd-with-turns])} \"Update with turns\"]]\n    [:li [:button {:on-click #(re-frame/dispatch [:remove-vacant-turns])} \"Remove turns\"]]\n\n    \"- Helpers\"\n    [:li [:button {:on-click #(re-frame/dispatch [:add-point])} \"Add Point\"]]\n    [:li [:button {:on-click #(re-frame/dispatch [:add-turn-l])} \"Add Turn L\"]]\n    [:li [:button {:on-click #(re-frame/dispatch [:add-turn-r])} \"Add Turn R\"]]]])\n\n;;; snake view\n\n;; SNAKE\n\n;; home\n(defn home-title []\n  (let [name (re-frame/subscribe [::subs/name])]\n    [re-com/title\n     :src   (at)\n     :label (str \"Hello from \" @name \". This is the Home Page.\")\n     :level :level1\n     :class (styles/level1)]))\n\n(defn link-to-about-page []\n  [re-com/hyperlink\n   :src      (at)\n   :label    \"go to About Page\"\n   :on-click #(re-frame/dispatch [::events/navigate :about])])\n\n(defn home-panel []\n  [re-com/v-box\n   :src      (at)\n   :gap      \"1em\"\n   :children [;; [home-title]\n             ;; [link-to-about-page]\n              [snake-app]]])\n\n(defmethod routes/panels :home-panel [] [home-panel])\n\n;; about\n\n(defn about-title []\n  [re-com/title\n   :src   (at)\n   :label \"This is the About Page.\"\n   :level :level1])\n\n(defn link-to-home-page []\n  [re-com/hyperlink\n   :src      (at)\n   :label    \"go to Home Page\"\n   :on-click #(re-frame/dispatch [::events/navigate :home])])\n\n(defn about-panel []\n  [re-com/v-box\n   :src      (at)\n   :gap      \"1em\"\n   :children [[about-title]\n              [:div {:style {:color \"black\"}}\n               [link-to-home-page]]]])\n\n(defmethod routes/panels :about-panel [] [about-panel])\n\n;; main\n(defn main-panel []\n  (let [active-panel (re-frame/subscribe [::subs/active-panel])]\n    [re-com/v-box\n     :src      (at)\n     :height   \"100%\"\n     :children [(routes/panels @active-panel)]]))\n"]}