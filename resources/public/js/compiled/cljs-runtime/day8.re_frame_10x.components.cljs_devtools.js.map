{"version":3,"sources":["day8/re_frame_10x/components/cljs_devtools.cljs"],"mappings":"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","names":["cljs.core/deref","day8.re-frame-10x.components.cljs-devtools/default-config","devtools.prefs/default-config","day8.re-frame-10x.components.cljs-devtools/base-config","day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.core.style","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px","day8.re-frame-10x.styles/gs-5","day8.re-frame-10x.components.cljs-devtools/body-style-base","day8.re-frame-10x.styles/gs-2","day8.re-frame-10x.styles/gs-12","day8.re-frame-10x.styles/nord3","day8.re-frame-10x.components.cljs-devtools/dark-ambiance-config","day8.re-frame-10x.styles/nord0","day8.re-frame-10x.styles/nord6","day8.re-frame-10x.components.cljs-devtools/bright-ambiance-config","day8.re-frame-10x.components.cljs-devtools/custom-config","cljs.core.merge","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.components.cljs-devtools/header","p__73697","vec__73699","map__73702","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","seq73684","G__73685","cljs.core/first","cljs.core/next","G__73686","self__5754__auto__","value","config","render-paths?","previous-config__73640__auto__","devtools.prefs/get-prefs","prefs__73641__auto__","devtools.prefs/set-prefs!","cljs.core._EQ_","js/Error","devtools.formatters.core/header-api-call","day8.re-frame-10x.components.cljs-devtools/body","p__73724","vec__73725","map__73728","seq73715","G__73716","G__73717","devtools.formatters.core/body-api-call","day8.re-frame-10x.components.cljs-devtools/has-body","devtools.formatters.core/has-body-api-call","day8.re-frame-10x.components.cljs-devtools/get-object","jsonml","day8.re-frame-10x.components.cljs-devtools/get-config","day8.re-frame-10x.components.cljs-devtools/jsonml-style-factory$","style-name73780","params73781","style73783","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/compile-css","factory-name73782","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.util/factory->name","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/ensure-style!","day8.re-frame-10x.components.cljs-devtools/jsonml-style","day8.re-frame-10x.styles/syntax-color","day8.re-frame-10x.components.cljs-devtools/toggle-style-factory$","style-name73795","params73796","base-style73800","key__54883__auto__","cljs.core/meta","name73799","fexpr__73808","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.util/build-style-name","style73798","cljs.core.into","factory-name73797","day8.re-frame-10x.components.cljs-devtools/toggle-style","ambiance","day8.re-frame-10x.styles/nord5","day8.re-frame-10x.components.cljs-devtools/data-structure","_","path","expanded?","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.subscribe","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/dispatch","day8.re-frame-10x.material/arrow-drop-down","day8.re-frame-10x.material/arrow-right","and__5043__auto__","G__73821","G__73822","day8.re-frame-10x.components.cljs-devtools/jsonml->hiccup","cljs.core.conj","G__73824","G__73825","day8.re-frame-10x.components.cljs-devtools/data-structure-with-path-annotations","p__73858","map__73861","indexed-path","devtools-path","expand?","path-id","opts","node-expanded?","show-body?","or__5045__auto__","G__73866","G__73867","G__73868","G__73869","day8.re-frame-10x.components.cljs-devtools/jsonml->hiccup-with-path-annotations","day8.re_frame_10x.components.cljs_devtools.body","G__73871","G__73872","G__73873","G__73874","day8.re-frame-10x.components.cljs-devtools/string->css","css-string","clojure.string.split","p1__73878#","cljs.core.map","cljs.core.reduce","p__73882","vec__73883","acc","property","cljs.core.assoc","cljs.core.keyword","vec__73904","seq__73905","cljs.core/seq","first__73906","tag-name","attributes","children","tagnames","cljs.core/contains?","cljs.core.js__GT_clj","cljs.core.map_indexed","i","child","G__73911","G__73912","G__73913","G__73914","p__73930","map__73942","click-listener","middle-click-listener","menu-listener","vec__73945","seq__73946","first__73947","G__73953","G__73954","G__73955","G__73956","jsonml-path-index","cljs.core/last","absolute-devtools-path","element-id","cljs.core/random-uuid","child-element","child-value","js/Array","child-component","G__73963","G__73964","G__73965","G__73966","p1__73917#","cljs.core/Keyword","G__73970","goog.events/listen","day8.re-frame-10x.components.cljs-devtools/prn-str-render?","data","js/RegExp","cljs.core/boolean?","day8.re-frame-10x.components.cljs-devtools/prn-str-render-style-factory$","style-name73980","params73981","style73983","factory-name73982","day8.re-frame-10x.components.cljs-devtools/prn-str-render-style","day8.re-frame-10x.components.cljs-devtools/prn-str-render","cljs.core.prn_str","day8.re-frame-10x.components.cljs-devtools/simple-render","p__73993","vec__73994","map__73997","seq73988","G__73989","G__73990","class","sort?","ns->alias","alias?","G__74007","day8.re-frame-10x.tools.datafy/alias-namespaces","day8.re-frame-10x.tools.datafy/deep-sorted-map","day8.re-frame-10x.components.re-com/box","p__74015","map__74016","day8.re-frame-10x.components.cljs-devtools/simple-render-with-path-annotations","open-new-inspectors?","G__74017","day8.re_frame_10x.components.cljs_devtools.header","p1__74012#","p1__74013#","p1__74014#","temp__5804__auto__","G__74018","target","G__74026","btn","G__74028","day8.re-frame-10x.tools.reader.edn/read-string-maybe"],"sourcesContent":["(ns day8.re-frame-10x.components.cljs-devtools\n  (:require-macros\n   [day8.re-frame-10x.components.cljs-devtools                   :refer [with-cljs-devtools-prefs]])\n  (:require\n   [clojure.string :as string]\n   [devtools.prefs]\n   [devtools.formatters.core]\n   [goog.dom]\n   [goog.events]\n   [goog.style]\n   [goog.ui.PopupMenu]\n   [goog.ui.MenuItem]\n   [goog.ui.Component]\n   [goog.object]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core :as rf]\n   [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.core    :refer [style]]\n   [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units   :refer [px]]\n   [day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.core    :refer [defclass]]\n   [day8.re-frame-10x.components.re-com                          :as rc]\n   [day8.re-frame-10x.material                                   :as material]\n   [day8.re-frame-10x.styles                                     :as styles]\n   [day8.re-frame-10x.panels.app-db.events                       :as app-db.events]\n   [day8.re-frame-10x.panels.app-db.subs                         :as app-db.subs]\n   [day8.re-frame-10x.tools.datafy                               :as tools.datafy]\n   [day8.re-frame-10x.tools.reader.edn                           :as reader.edn]\n   [day8.re-frame-10x.panels.settings.subs                       :as settings.subs]))\n\n(def default-config @devtools.prefs/default-config)\n\n(defn base-config\n  []\n  {; Hide index tags\n   :index-tag                              [:span :none-style]\n   :none-style                             (style {:display :none})\n\n   ; Our JSON renderer does not have hierarchy depth limit,\n   ; See https://github.com/binaryage/cljs-devtools/blob/master/src/lib/devtools/formatters/budgeting.cljs\n   :initial-hierarchy-depth-budget         false\n   :item-style                             (style {:display     :inline-block\n                                                   :white-space :nowrap\n                                                   :border-left [[(px 2) :solid :#000]]\n                                                   :padding     [[0 styles/gs-5 0 styles/gs-5]]\n                                                   :margin      [[(px 1 0 0 0)]]})})\n\n(def body-style-base\n  {:display          :inline-block\n   :padding          [[styles/gs-2 styles/gs-12]]\n   :border           [[(px 1) :solid styles/nord3]]\n   :margin           (px 1)\n   :margin-top       0})\n\n(def dark-ambiance-config\n  {:cljs-land-style (style {:background-color styles/nord0\n                            :color            styles/nord6})\n   :body-style      (style body-style-base {:background-color styles/nord0})})\n\n(def bright-ambiance-config\n  {:cljs-land-style (style {:background-color styles/nord6\n                            :color            styles/nord0})\n   :body-style      (style body-style-base {:background-color styles/nord6})})\n\n;; This used to be in the api-call fn below. However, recalculating this on *every* render is expensive so moved\n;; here as static def.\n;; TODO: If we expose ambiance and/or syntax color scheme as settings will need to fix this, maybe by recalculating\n;; at the time the setting is changed/loaded.\n(def custom-config\n  (merge default-config (base-config) #_bright-ambiance-config))\n\n(defn header [value config & [{:keys [render-paths?]}]]\n  (with-cljs-devtools-prefs\n    (if render-paths?\n      (merge custom-config {:render-path-annotations       true})\n      custom-config)\n    (devtools.formatters.core/header-api-call value config)))\n\n(defn body [value config & [{:keys [render-paths?]}]]\n  (with-cljs-devtools-prefs\n    (if render-paths?\n      (merge custom-config {:render-path-annotations       true})\n      custom-config)\n    (devtools.formatters.core/body-api-call value config)))\n\n(defn has-body [value config]\n  (with-cljs-devtools-prefs custom-config\n    (devtools.formatters.core/has-body-api-call value config)))\n\n(defn get-object [jsonml]\n  (.-object (get jsonml 1)))\n\n(defn get-config [jsonml]\n  (.-config (get jsonml 1)))\n\n(declare jsonml->hiccup)\n(declare jsonml->hiccup-with-path-annotations)\n\n(defclass jsonml-style\n  []\n  {:display          :inline\n   :flex-direction   :row\n   :background-color (styles/syntax-color :bright :cljs-devtools :signature-background)}\n  [\"> span\"\n   {:vertical-align :text-top}]\n  [:li\n   {:margin 0}])\n\n(defclass toggle-style\n  [ambiance]\n  {:cursor      :pointer\n   :display     :inline\n   :align-self  :center\n   #_#_:line-height 1}\n  [:button\n   {:cursor :pointer\n    :background :none\n    :border :none}]\n  [:svg :path\n   {:fill (if (= ambiance :bright) styles/nord0 styles/nord5)}])\n\n(defn data-structure [_ path]\n  (let [expanded? (rf/subscribe [::app-db.subs/node-expanded? path])]\n    (fn [jsonml path]\n      [:span\n       {:class (jsonml-style)}\n       [:span {:class    (toggle-style :bright)\n               :on-click #(rf/dispatch [::app-db.events/toggle-expansion path])}\n        [:button\n         (if @expanded?\n           [material/arrow-drop-down]\n           [material/arrow-right])]]\n       (if (and @expanded? (has-body (get-object jsonml) (get-config jsonml)))\n         (jsonml->hiccup\n          (body\n           (get-object jsonml)\n           (get-config jsonml))\n          (conj path :body))\n         (jsonml->hiccup\n          (header\n           (get-object jsonml)\n           (get-config jsonml))\n          (conj path :header)))])))\n\n(defn data-structure-with-path-annotations [_ _ _ _]\n  (let [render-paths? (rf/subscribe [::app-db.subs/data-path-annotations?])]\n    (fn [jsonml indexed-path devtools-path {:keys [expand? path-id] :as opts}]\n      (let [node-expanded?  @(rf/subscribe [::app-db.subs/node-expanded? indexed-path])\n            show-body? (and (has-body (get-object jsonml) (get-config jsonml))\n                            (or (and node-expanded? (not (nil? expand?)))\n                                expand?))]\n        [:span\n         {:class (jsonml-style)}\n         [:span {:class    (toggle-style :bright)\n                 :on-click #(do (rf/dispatch [::app-db.events/toggle-expansion indexed-path])\n                                (rf/dispatch [::app-db.events/expand {:id path-id :expand? false}]))}\n          [:button\n           (if show-body?\n             [material/arrow-drop-down]\n             [material/arrow-right])]]\n         (if show-body?\n           (jsonml->hiccup-with-path-annotations\n            (body\n             (get-object jsonml)\n             (get-config jsonml)\n             {:render-paths? @render-paths?})\n            (conj indexed-path :body)\n            devtools-path\n            opts)\n           (jsonml->hiccup-with-path-annotations\n            (header\n             (get-object jsonml)\n             (get-config jsonml))\n            (conj indexed-path :header)\n            devtools-path\n            opts))]))))\n\n(defn string->css\n  \"This function converts jsonml css-strings to valid css maps for hiccup.\n  Example: 'margin-left:0px;min-height:14px;' converts to\n           {:margin-left '0px', :min-height '14px'}\"\n  [css-string]\n  (->> (string/split css-string #\";\")\n       (map #(string/split % #\":\"))\n       (reduce (fn [acc [property value]]\n                 (assoc acc (keyword property) value)) {})))\n\n(defn jsonml->hiccup\n  \"JSONML is the format used by Chrome's Custom Object Formatters.\n  The spec is at https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview.\n\n  JSONML is pretty much Hiccup over JSON. Chrome's implementation of this can\n  be found at https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/object_ui/CustomPreviewComponent.js\n  \"\n  [jsonml path]\n  (if (number? jsonml)\n    jsonml\n    (let [[tag-name attributes & children] jsonml\n          tagnames #{\"div\" \"span\" \"ol\" \"li\" \"table\" \"tr\" \"td\"}]\n      (cond\n        (contains? tagnames tag-name) (into\n                                       [(keyword tag-name) {:style (-> (js->clj attributes)\n                                                                       (get \"style\")\n                                                                       (string->css))}]\n                                       (map-indexed (fn [i child] (jsonml->hiccup child (conj path i))))\n                                       children)\n\n        (= tag-name \"object\") [data-structure jsonml path]\n        (= tag-name \"annotation\") (into [:span {}]\n                                        (map-indexed (fn [i child] (jsonml->hiccup child (conj path i))))\n                                        children)\n        :else jsonml))))\n\n(defn jsonml->hiccup-with-path-annotations\n  \"JSONML is the format used by Chrome's Custom Object Formatters.\n  The spec is at https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview.\n\n  JSONML is pretty much Hiccup over JSON. Chrome's implementation of this can be found at\n  https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/object_ui/CustomPreviewComponent.js\n\"\n  [jsonml indexed-path devtools-path {:keys [click-listener middle-click-listener menu-listener]\n                                      :as   opts}]\n  ;; indexed-path is updated on every html element such as `tagnames`\n  ;; while devtools-path is updated only when we encounter an element that contains the `:path` attribute.\n  (if (number? jsonml)\n    jsonml\n    (let [[tag-name attributes & children] jsonml\n          tagnames                         #{\"div\" \"span\" \"ol\" \"li\" \"table\" \"tr\" \"td\"}]\n      (cond\n        (contains? tagnames\n                   tag-name) (into [(keyword tag-name) {:style (-> (js->clj attributes)\n                                                                   (get \"style\")\n                                                                   (string->css))}]\n                                   (map-indexed (fn [i child] (jsonml->hiccup-with-path-annotations\n                                                               child\n                                                               (conj indexed-path i)\n                                                               devtools-path\n                                                               opts)))\n                                   children)\n\n        (= tag-name\n           \"object\")     [data-structure-with-path-annotations jsonml indexed-path devtools-path opts]\n        (= tag-name\n           \"annotation\") (let [;;index of the current element in the immediate parent\n                               jsonml-path-index      (-> attributes\n                                                          (js->clj :keywordize-keys true)\n                                                          :path\n                                                          last)\n                               ;; path of the current visible db from root node view\n                               absolute-devtools-path (if jsonml-path-index\n                                                        (conj devtools-path jsonml-path-index)\n                                                        devtools-path)\n                               element-id             (str (random-uuid))\n                               child-element          (nth children 0 nil)\n                               child-value            (when (instance? js/Array child-element)\n                                                        (nth child-element 2 nil))\n                               child-component        (fn [i child] (jsonml->hiccup-with-path-annotations\n                                                                     child\n                                                                     (conj indexed-path i)\n                                                                     absolute-devtools-path\n                                                                     opts))]\n                           (into [:span (if-not (or (string? child-value)\n                                                    (number? child-value)\n                                                    (keyword? child-value))\n                                          {}\n                                          {:id        element-id\n                                           :ref       #(when %\n                                                         (doto %\n                                                           (goog.events/listen \"contextmenu\" menu-listener)\n                                                           (goog.events/listen \"dblclick\" click-listener)\n                                                           (goog.events/listen \"mousedown\" middle-click-listener)))\n                                           :class     \"path-annotation\"\n                                           :data-path (str absolute-devtools-path)})]\n                                 (map-indexed child-component children)))\n        :else            jsonml))))\n\n(defn prn-str-render?\n  [data]\n  (or (string? data)\n      (instance? js/RegExp data)\n      (number? data)\n      (boolean? data)\n      (nil? data)))\n\n(defclass prn-str-render-style\n  []\n  {:background-color (styles/syntax-color :bright :cljs-devtools :signature-background)\n   :color            (styles/syntax-color :bright :cljs-devtools :bool)})\n\n(defn prn-str-render\n  [data]\n  [:div {:class (prn-str-render-style)}\n   (prn-str data)])\n\n(defn simple-render\n  [data path & [{:keys [class sort?]}]]\n  (let [ns->alias             @(rf/subscribe [::settings.subs/ns->alias])\n        alias?                (and (seq ns->alias)\n                                   @(rf/subscribe [::settings.subs/alias-namespaces?]))\n        data                  (cond-> data\n                                alias? (tools.datafy/alias-namespaces ns->alias)\n                                sort? tools.datafy/deep-sorted-map)]\n    [rc/box\n     :size  \"1\"\n     :class (str (jsonml-style) \" \" class)\n     :child\n     (if (prn-str-render? data)\n       (prn-str-render data)\n       (jsonml->hiccup (header data nil) (conj path 0)))]))\n\n(defn simple-render-with-path-annotations\n  [{:keys [data path path-id sort?] :as opts}]\n  (let [render-paths?         @(rf/subscribe [::app-db.subs/data-path-annotations?])\n        open-new-inspectors?  @(rf/subscribe [::settings.subs/open-new-inspectors?])\n        ns->alias             @(rf/subscribe [::settings.subs/ns->alias])\n        alias?                (and (seq ns->alias)\n                                   @(rf/subscribe [::settings.subs/alias-namespaces?]))\n        data                  (cond-> data\n                                alias? (tools.datafy/alias-namespaces ns->alias)\n                                sort? tools.datafy/deep-sorted-map)]\n    [rc/box\n     :size \"1\"\n     :class (jsonml-style)\n     :child\n     (if (prn-str-render? data)\n       (prn-str-render data)\n       (jsonml->hiccup-with-path-annotations\n        (header data nil {:render-paths? render-paths?})\n        [\"app-db-path\" path]\n        (or path [])\n        (merge\n         opts\n         {:click-listener        #(when-let [path (some-> % .-target .-parentElement (.getAttribute \"data-path\"))]\n                                    (when (= (.-button %) 0)\n                                      (rf/dispatch [::app-db.events/update-path {:id path-id\n                                                                                 :path-str path}])))\n          :middle-click-listener #(when-let [target (some-> % .-target .-parentElement)]\n                                    (let [path (.getAttribute target \"data-path\")\n                                          btn  (.-button %)]\n                                      (.preventDefault %)\n                                      (when (= btn 1)\n                                        (rf/dispatch\n                                         [::app-db.events/create-path-and-skip-to path open-new-inspectors?]))))\n          :menu-listener         #(do (.preventDefault %)\n                                      (rf/dispatch\n                                       [::app-db.events/open-popup-menu\n                                        {:data data\n                                         :mouse-position [(.-clientX %) (.-clientY %)]\n                                         :path path\n                                         :data-path (some-> %\n                                                            .-target\n                                                            .-parentElement\n                                                            (.getAttribute \"data-path\")\n                                                            reader.edn/read-string-maybe)}]))})))]))\n"],"x_google_ignoreList":[0]}