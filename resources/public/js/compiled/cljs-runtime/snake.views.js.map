{"version":3,"sources":["snake/views.cljs"],"mappings":"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","names":["snake.views/key-rules-move-snake-debug","re-frame.core/dispatch","re-frame.core/reg-cofx","cofx","cljs.core.assoc","js/Date","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__43423","vec__43424","cljs.core.nth","act","value","p__43428","vec__43429","_","cljs.core.update","v","snake.views/dispatch-timer-event","now","p__43433","vec__43434","new-time","snake.views/matom","cljs.core.atom","p__43437","vec__43438","re-frame.core/reg-fx","js/console.log","cljs.core/reset!","js/setInterval","p__43441","vec__43442","cljs.core/deref","new-v","p__43445","vec__43446","ticker","js/clearInterval","re_frame.core.reg_event_db","p__43451","vec__43452","db","points","cljs.core/vec","cljs.core.map","p","cljs.core.update_in","snake.views/inc-x","pnt","frm","r","snake.views/dec-x","snake.views/inc-y","snake.views/dec-y","p__43459","vec__43460","head","cljs.core/first","hx","hy","fx","fy","or__5045__auto__","cljs.core/not-empty","cljs.core.filter","cljs.core._EQ_","cljs.core/rest","p__43464","vec__43465","growers","head-food","f","tail","cljs.core/last","eated-growers","fds","p1__43463#","cljs.core.remove","q","cljs.core.conj","p__43468","vec__43469","temp__5802__auto__","new","rst","new-grow-queue","p__43472","vec__43473","cljs.core/rand-int","x","y","snake.views/remove-absent","t","e","snake.views/merge-with-match","turns","cljs.core.merge","p__43476","vec__43477","p__43480","vec__43481","p__43484","vec__43485","flow","flow-map","new-flow","cljs.core.get","upd-with-head","cljs.core.get_in","clean-double","re_frame.core.reg_sub","frame","cljs.core.range","re_frame.core.subscribe","p__43488","vec__43489","snake","is-lose","snake.views/frame-with-growers","i","cljs.core/count","g","gx","gy","px","py","p__43492","vec__43493","cljs.core/reverse","snake.views/table-frame","iter__5523__auto__","s__43497","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__43499","cljs.core/chunk-buffer","i__43498","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43496","cljs.core/chunk-rest","cljs.core/cons","s__43501","b__43503","i__43502","iter__43500","s__43505","b__43507","i__43506","iter__43504","cell","snake.views/snake-app","p__43508","vec__43509","p__43512","vec__43513","p__43516","vec__43517","snake.views/home-title","name","re-com.core/title","js/goog.DEBUG","snake.styles/level1","snake.views/link-to-about-page","re-com.core/hyperlink","snake.views/home-panel","re-com.core/v-box","snake.tetris/tetris-app","snake.routes/panels","snake.views/about-title","snake.views/link-to-home-page","snake.views/about-panel","snake.views/main-panel","active-panel","cljs.core/chunk-first"],"sourcesContent":["(ns snake.views\n  (:require\n   [re-frame.core :as re-frame]\n   [re-com.core :as re-com :refer [at]]\n   [re-pressed.core :as rp]\n\n   [snake.tetris :as tetris]\n\n   [snake.styles :as styles]\n   [snake.events :as events]\n   [snake.routes :as routes]\n   [snake.subs :as subs]))\n\n;;\n;; SNAKE GAME\n;;\n;; Bugs\n;;   Crash with many 'Move' tap AFTER game losed [   ]\n;;\n;; Refactor\n;;   Subs for views with Snake, Grows, Empty Field [   ]\n;;   Snake entity rename 'points' -> 'snake') [   ]\n;;\n;; Feature\n;;   Bind moves to keys [   ]\n;;     Turn actived snake with keys [   ]\n;;\n;;   Automatic move with speed [   ]\n;;     Level up: increase speed [   ]\n;;\n;;   Scores Calculation [   ]\n;;\n;;   Achievment list [   ]\n;;     Score level, Fill 50% field, Access spped level, Survive 100 movements etc\n;;\n;;   Switch btwn Infinite / Solid field with Bool flag [   ]\n;;\n\n;; Keys\n;;   Codes\n;;     space 32\n;;     w 87 s 83 a 65 d 68\n;;     s 83 x 88 z 90 c 67\n;;     left37 up38 right39 down40\n;;\n;;   Actions\n;;     Start\n;;     Stop\n;;     Restart\n;;     Pause\n;;\n;;\n\n(defn key-rules-move-snake-debug []\n  (re-frame/dispatch\n   [::rp/set-keydown-rules\n    {:event-keys [[[:add-point] [{:keyCode 32}]]\n                  [[:move-with-key :u] [{:keyCode 87}]]\n                  [[:move-with-key :d] [{:keyCode 83}]]\n                  [[:move-with-key :l] [{:keyCode 65}]]\n                  [[:move-with-key :r] [{:keyCode 68}]]\n\n                  [[:move-with-key :u] [{:keyCode 38}]]\n                  [[:move-with-key :d] [{:keyCode 40}]]\n                  [[:move-with-key :l] [{:keyCode 37}]]\n                  [[:move-with-key :r] [{:keyCode 39}]]]\n\n     :clear-keys\n     [[{:keyCode 27} ;; escape\n       ]]}]))\n\n(re-frame/reg-cofx\n :key-press-time\n (fn[cofx]\n   (assoc cofx :key-press-time (js/Date))))\n\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :move-with-key\n [(re-frame/inject-cofx :key-press-time)]\n (fn [cofx [act value]]        ;; 1st argument is coeffects, instead of db\n   {:db (assoc (:db cofx) :move-with-key value :key-press-time (:key-press-time cofx))\n    :fx       [[:dispatch [:add-turn value]]\n              ; [:dispatch [:move]]\n               ]}))\n\n\n;; Move\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :move\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) act (fn [v] (inc v)))\n    :fx       [[:dispatch [:update-crd]]\n               [:dispatch [:snake-grow]]\n               [:dispatch [:eat-food]]\n               [:dispatch [:generate-growers]]\n               [:dispatch [:check-lose]]\n               [:dispatch [:update-crd-with-turns]]\n               [:dispatch [:remove-vacant-turns]]]}))\n\n\n;; Game\n(defn dispatch-timer-event\n  []\n  (let [now (js/Date.)]\n    (re-frame/dispatch [:timer now])))  ;; <-- dispatch used\n\n(re-frame/reg-event-fx                 ;; usage:  (dispatch [:timer a-js-Date])\n :timer                         ;; every second an event of this kind will be dispatched\n (fn [cofx [_ new-time]]          ;; note how the 2nd parameter is destructured to obtain the data value\n   {:db      (assoc (:db cofx) :time new-time)\n    :fx       [[:dispatch [:move]]]}))\n\n\n\n;; Tick\n;;\n;; [:start-tick])} \"Start tick\"]]\n;; [:stop-tick])} \"Stop tick\"]]\n;; [:speed-up-tick])} \"Speed up tick\"]]\n;; [:slow-down-tick])} \"Slow down tick\"]]\n;;\n\n(def matom (atom {:ticker nil :value 0})) ; reagent/atom ??\n\n(re-frame/reg-event-fx\n :start-tick\n (fn [cofx [_ v]]\n   {:start-tick-fx v}))\n\n(re-frame/reg-fx\n  :start-tick-fx\n  (fn [v]\n    (js/console.log \"start-tick-fx\" v)\n    (reset! matom {:ticker (js/setInterval dispatch-timer-event v) :value v})))\n\n(re-frame/reg-event-fx\n :speed-up-tick\n (fn [cofx [act _]]\n   (let [v (:value @matom)\n         new-v (- v 100)]\n   {\n    :fx       [\n               [:dispatch [:stop-tick]]\n               [:dispatch [:start-tick new-v]]\n               ]})))\n\n(re-frame/reg-event-fx\n :stop-tick\n (fn [cofx [_ _]]\n   {:stop-tick-fx nil}))\n\n(re-frame/reg-fx\n  :stop-tick-fx\n  (fn [ticker]\n    (js/console.log \"stop-tick-fx\")\n    (js/clearInterval (:ticker @matom))\n    (reset! matom  {:ticker nil :value 0})))\n\n\n\n;; Update coordinates\n\n(re-frame/reg-event-db\n :update-crd\n (fn [db [_ _]]\n   (update db\n           :points\n           (fn [points]\n             (vec (map\n                   (fn [p] (update-in p [:crd] (:nxt p) (:frame db)))\n                   points))))))\n\n;-solid field\n(defn inc-x [pnt frm]\n  (let [r (inc (:x pnt))]\n    (assoc pnt :x r)))\n\n(defn dec-x [pnt frm]\n  (let [r (dec (:x pnt))]\n    (assoc pnt :x r)))\n\n(defn inc-y [pnt frm]\n  (let [r (inc (:y pnt))]\n    (assoc pnt :y r)))\n\n(defn dec-y [pnt frm]\n  (let [r (dec (:y pnt))]\n    (assoc pnt :y r)))\n\n;; - close field\n(comment\n(defn inc-x [pnt frm]\n  (let [t (inc (:x pnt))\n        r (if (> t (:x frm)) 0 t)]\n    (assoc pnt :x r)))\n\n(defn dec-x [pnt frm]\n  (let [t (dec (:x pnt))\n        r (if (< t 0) (:x frm) t)]\n    (assoc pnt :x r)))\n\n(defn inc-y [pnt frm]\n  (let [t (inc (:y pnt))\n        r (if (> t (:y frm)) 0 t)]\n    (assoc pnt :y r)))\n\n(defn dec-y [pnt frm]\n  (let [t (dec (:y pnt))\n        r (if (< t 0) (:y frm) t)]\n    (assoc pnt :y r)))\n\n(def turns-map {inc-x {:l dec-y :r inc-y}\n                dec-x {:l inc-y :r dec-y}\n                inc-y {:l dec-x :r inc-x}\n                dec-y {:l inc-x :r dec-x}})\n)\n;; Check lose\n(re-frame/reg-event-db\n :check-lose\n (fn [db [_ _]]\n   (let [head (-> db :points first)\n         hx (-> head :crd :x)\n         hy (-> head :crd :y)\n         fx (-> db :frame :x)\n         fy (-> db :frame :y)]\n     (if (or (not-empty (filter (fn [v] (= (:crd head) (:crd v)))\n                                (rest (:points db))))\n             (or (<= hx 0) (<= hy 0) (> hx fx) (> hy fy)))\n       (update db :is-lose (fn [_] true))\n       (update db :is-lose (fn [_] false))))))\n\n;; Grow\n(re-frame/reg-event-db\n :eat-food\n (fn [db [_ _]]\n   (let [head (-> db :points first)\n         hx (-> head :crd :x)\n         hy (-> head :crd :y)\n         growers (:growers db)\n         head-food (filter (fn [f] (and (= hx (:x f)) (= hy (:y f)))) growers)]\n     (if (not-empty head-food)\n       (let [tail (-> db :points last)\n             eated-growers\n             (update db\n                     :growers\n                     (fn [fds] (vec (remove #(= % (first head-food)) fds))))]\n         (update eated-growers :grow-queue (fn [q] (conj q tail))))\n       db))))\n\n(re-frame/reg-event-db\n :snake-grow\n (fn [db [_ _]]\n   (if-let [new (first (-> db :grow-queue))]\n     (let [rst (rest (-> db :grow-queue))\n           new-grow-queue (update db :grow-queue (fn [_] (vec rst)))]\n       (update new-grow-queue :points (fn [points] (conj points new))))\n     db)))\n\n(re-frame/reg-event-db\n :generate-growers\n (fn [db [_ _]]\n   (if (> (rand-int 100) 85)\n     (let [x (inc (rand-int (-> db :frame :x)))\n           y (inc (rand-int (-> db :frame :y)))]\n       (assoc db :growers (conj (:growers db) {:x x :y y})))\n       db)))\n\n;; Turns queue\n(defn remove-absent [t e]\n  (filter\n   (fn [r] (not-empty (filter\n                       (fn [p] (and (= (-> r :crd :x) (-> p :crd :x))\n                                    (= (-> r :crd :y) (-> p :crd :y))))\n                       e)))\n   t))\n\n(defn merge-with-match [points turns]\n  (vec (map\n        (fn [p]\n          (let [r (remove-absent turns [p])]\n            (if (not-empty r) (merge p (first r)) p)))\n        points)))\n\n(re-frame/reg-event-db\n :update-crd-with-turns\n (fn [db [_ _]]\n   (update db :points (fn [points] (merge-with-match points (:turns db))))))\n\n(re-frame/reg-event-db\n :remove-vacant-turns\n (fn [db [_ _]]\n   (update db :turns (fn [turns] (vec (remove-absent turns (:points db)))))))\n\n;;; re-frame\n\n(re-frame/reg-event-db\n :add-turn\n (fn [db [_ flow]]\n   (let [flow-map {:l dec-x :r inc-x :u dec-y :d inc-y}\n         new-flow (get flow-map flow)\n         upd-with-head (update-in db [:points 0] (fn [p] (assoc p :nxt new-flow)))\n         head (get-in upd-with-head [:points 0])]\n\n     (let [hx (-> head :crd :x)\n           hy (-> head :crd :y)\n           clean-double (remove (fn [v] (and (= hx (-> v :crd :x))\n                                             (= hy (-> v :crd :y))))\n                                (:turns db))]\n       (update upd-with-head\n               :turns\n               (fn [_] (conj clean-double head)))))))\n\n;; subs\n(re-frame/reg-sub\n :is-lose\n (fn [db] (:is-lose db)))\n\n;; (re-frame/reg-sub\n;;  :frame\n;;  (fn [db] (:frame db)))\n\n(re-frame/reg-sub\n :growers\n (fn [db] (:growers db)))\n\n(re-frame/reg-sub\n :snake\n (fn [db] (:points db)))\n\n(re-frame/reg-sub\n :frame-field-empty\n (fn [db]\n   (let [frame (vec (map\n                     (fn [_] (vec (map\n                                   (fn [_] \"[]\")\n                                   (range (-> db :frame :x)))))\n                     (range (-> db :frame :y))))]\n     frame)))\n\n(re-frame/reg-sub\n :frame-field-content\n (fn []\n   [(re-frame/subscribe [:frame-field-empty])\n    (re-frame/subscribe [:snake])\n    (re-frame/subscribe [:growers])\n    (re-frame/subscribe [:is-lose])])\n\n (fn [[frame snake growers is-lose]]\n   (def frame-with-growers\n     (loop [i 0 frm frame]\n       (if (>= i (count growers))\n         frm\n         (let [g (get growers i) gx (-> (get g :x) dec) gy (-> (get g :y) dec)]\n           (recur (inc i)\n                  (update-in frm [gy gx] (fn [_] \"+\")))))))\n\n   (loop [i 0 frm frame-with-growers]\n     (if (or (>= i (count snake)) is-lose)\n       frm\n       (let [p (get snake i) px (-> p :crd :x dec) py (-> p :crd :y dec)]\n         (recur (inc i)\n                (update-in frm [py px] (fn [_] \"*\"))))))))\n\n;; Helpers\n(re-frame/reg-event-db\n :add-point\n (fn [db [_ _]]\n   (update db\n           :points\n           (fn [_]\n             (->> (range 1 2)\n                  (map (fn [v] {:crd {:x v :y 1} :nxt inc-x}))\n                  reverse\n                  vec)))))\n\n;;; snake view\n\n(defn table-frame []\n  [:table\n   [:tbody\n    (for [frame @(re-frame/subscribe [:frame-field-content])]\n      [:tr {:key (rand-int 100000)}\n       (for [cell frame]\n         [:td {:key (rand-int 100000)} cell])])]])\n\n(defn snake-app []\n  [:div {:style {:color :black}}\n   [:h1 \"Snake game\"]\n   [:ol\n\n    ;\"- Functions\"\n    [:li [:button {:on-click #(re-frame/dispatch [:start-tick 300])} \"Start Game\"]]\n\n    ;; [:li [:button {:on-click #(re-frame/dispatch [:stop-tick])} \"Stop tick\"]]\n    ;; [:li [:button {:on-click #(re-frame/dispatch [:speed-up-tick])} \"Speed up tick\"]]\n\n\n    ;; [:li [:button {:on-click #(re-frame/dispatch [:update-crd])} \"Update coordinate\"]]\n    ;; [:li [:button {:on-click #(re-frame/dispatch [:check-lose])} \"Check lose\"]]\n    ;; [:li [:button {:on-click #(re-frame/dispatch [:eat-food])} \"Eat foot\"]]\n    ;; [:li [:button {:on-click #(re-frame/dispatch [:snake-grow])} \"Snake grow\"]]\n    ;; [:li [:button {:on-click #(re-frame/dispatch [:update-crd-with-turns])} \"Update with turns\"]]\n    ;; [:li [:button {:on-click #(re-frame/dispatch [:remove-vacant-turns])} \"Remove turns\"]]\n    ;[:li [:button {:on-click #(re-frame/dispatch [:generate-growers])} \"Gen growers\"]]\n    ;\"- Helpers\"\n\n    [:li [:button {:on-click #(re-frame/dispatch [:add-point])} \"Create Snake\"]]\n    ;; [:li [:span\n    ;;       [:button {:on-click\n    ;;                 (fn [_]\n    ;;                   (re-frame/dispatch [:add-turn :l])\n    ;;                   (re-frame/dispatch [:move]))} \"<\"]\n    ;;       [:button {:on-click\n    ;;                 (fn [_]\n    ;;                   (re-frame/dispatch [:add-turn :u])\n    ;;                   (re-frame/dispatch [:move]))} \"^\"]\n    ;;       [:button {:on-click\n    ;;                 (fn [_]\n    ;;                   (re-frame/dispatch [:add-turn :d])\n    ;;                   (re-frame/dispatch [:move]))} \"V\"]\n    ;;       [:button {:on-click\n    ;;                 (fn [_]\n    ;;                   (re-frame/dispatch [:add-turn :r])\n    ;;                   (re-frame/dispatch [:move]))} \">\"]]]\n\n    ;[:li [:button {:on-click #(re-frame/dispatch [:move])} \"Move\"]]\n    [:li [table-frame]]]])\n\n;(key-rules-move-snake-debug)\n;;; snake view\n\n;; SNAKE\n\n;;; exp\n\n;; chain - experiment\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :chain\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) act (fn [_] 3))\n    :fx       [[:dispatch [:chain-2]]\n               [:dispatch [:chain-3]]]}))\n\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :chain-2\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) :chain (fn [v] (+ v v)))\n     ;:fx       [[:dispatch [:add-turn-l3]]]\n    }))\n\n(re-frame/reg-event-fx              ;; -fx registration, not -db registration\n :chain-3\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) :chain (fn [v] (* v v)))\n     ;:fx       [[:dispatch [:do-something-else 3]]]\n    }))\n;; chain - experiment\n\n;; exp\n\n;; home\n(defn home-title []\n  (let [name (re-frame/subscribe [::subs/name])]\n    [re-com/title\n     :src   (at)\n     :label (str \"Hello from \" @name \". This is the Home Page.\")\n     :level :level1\n     :class (styles/level1)]))\n\n(defn link-to-about-page []\n  [re-com/hyperlink\n   :src      (at)\n   :label    \"go to About Page\"\n   :on-click #(re-frame/dispatch [::events/navigate :about])])\n\n(defn home-panel []\n  [re-com/v-box\n   :src      (at)\n   :gap      \"1em\"\n   :children [;; [home-title]\n             ;; [link-to-about-page]\n\n              [tetris/tetris-app]\n              ;[snake-app]\n\n              ]])\n\n(defmethod routes/panels :home-panel [] [home-panel])\n\n;; about\n\n(defn about-title []\n  [re-com/title\n   :src   (at)\n   :label \"This is the About Page.\"\n   :level :level1])\n\n(defn link-to-home-page []\n  [re-com/hyperlink\n   :src      (at)\n   :label    \"go to Home Page\"\n   :on-click #(re-frame/dispatch [::events/navigate :home])])\n\n(defn about-panel []\n  [re-com/v-box\n   :src      (at)\n   :gap      \"1em\"\n   :children [[about-title]\n              [:div {:style {:color \"black\"}}\n               [link-to-home-page]]]])\n\n(defmethod routes/panels :about-panel [] [about-panel])\n\n;;main\n(defn main-panel []\n  (let [active-panel (re-frame/subscribe [::subs/active-panel])]\n    [re-com/v-box\n     :src      (at)\n     :height   \"100%\"\n     :children [(routes/panels @active-panel)]]))\n\n\n;; (contains? )\n;; (some )\n;; (some-fn)\n;; ((fnil conj #{}) 1)\n"]}