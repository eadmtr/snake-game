{"version":3,"sources":["snake/tetris.cljs"],"mappings":"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","names":["snake.tetris/empty-matrix-nm","n","m","line","cljs.core.repeat","cljs.core.take","cljs.core/vec","snake.tetris/rotate-matrix","transpose","v","cljs.core.mapv","ind","p1__43356#","cljs.core.get","p1__43357#","cljs.core.filter","cljs.core/contains?","cljs.core.map","cljs.core/count","cljs.core.apply","cljs.core/max","cljs.core.range","transposed","cljs.core/reverse","snake.tetris/clear-matrix","pure-m","p1__43358#","cljs.core.remove","cljs.core/every?","zero-row","cljs.core/first","zero-m","cljs.core.concat","snake.tetris/merge-matrices","dst","src","origin","y","cljs.core/last","cljs.core/empty?","cljs.core/rest","cljs.core.update","f","pre","post","f2","cljs.core/flatten","cljs.core._EQ_","p__43359","vec__43360","cljs.core.nth","snake.tetris/relative-coordinates","x","matrix","r","row","rest-rows","cljs.core/next","coordinates","a","cljs.core/conj","cljs.core/nil?","snake.tetris/can-merge-matrices-without-loses","src-crds","offset-x","cljs.core.get_in","offset-y","cljs.core/true?","p__43363","vec__43364","src-value","dst-value","snake.tetris/tetrominoes","var_args","G__43368","snake.tetris/create-stone","js/Error","cljs.core/rand-int","snake.tetris/move-stone","stone","direction","l","p1__43369#","cljs.core.update_in","p1__43370#","d","p1__43371#","t","mover","G__43372","cljs.core/Keyword","snake.tetris/can-move-stone-within-rock-to-direction","rock","dir","new-stone","shape","re_frame.core.reg_event_db","p__43373","vec__43374","db","_","temp__5804__auto__","cljs.core/assoc-in","cljs.core.assoc","stones","snake.tetris.create_stone","re_frame.core.reg_event_fx","p__43377","vec__43378","cofx","act","snake.tetris/key-rules-move-tetris","re-frame.core/dispatch","re_frame.core.reg_sub","re_frame.core.subscribe","p__43381","vec__43382","p__43385","vec__43386","cljs.core/second","p__43389","vec__43390","stone-on-field","snake.tetris/next-stone","iter__5523__auto__","s__43394","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__43396","cljs.core/chunk-buffer","i__43395","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43393","cljs.core/chunk-rest","cljs.core/cons","cljs.core/deref","frame","s__43398","b__43400","i__43399","iter__43397","s__43402","b__43404","i__43403","iter__43401","cell","snake.tetris/game-field","s__43406","b__43408","i__43407","iter__43405","s__43410","b__43412","i__43411","iter__43409","s__43414","b__43416","i__43415","iter__43413","snake.tetris/tetris-app","cljs.core/chunk-first"],"sourcesContent":["(ns snake.tetris\n  (:require\n\n   [re-frame.core :as rf]\n   [re-com.core :as re-com :refer [at]]\n   [re-pressed.core :as rp]))\n\n;;<\n;; Plan\n;;>\n;; Development.\n;;\n;; Tasks:\n;;   Game stage:\n;;   [ X ] Bind actions to key-press\n;;   [   ] Auto mover / move engine\n;;   [   ] Check lose for end game\n;;   [   ] Score calculation\n;;\n;;   Rock massive:\n;;   [   ] Inject new stone line by line\n;;   [ X ] Join stone to rock massive\n;;   [ X ] Flush lines with whole points\n;;\n;;   Stone:\n;;   [ X ] Add new random stones in queue\n;;   [ X ] Define set of stones\n;;   [ X ] CRUD operation with stones queue\n;;   [ X ] Rotate stone\n;;   [ X ] Move stone left, right, down\n;;   [ X ] Inject stone to the field line by line (from 1 bottom to whole stone)\n;;\n;;   Field:\n;;   [ X ] Draw next stone from queue\n;;   [ X ] Draw game field\n;;   [ X ] Draw game field with rock massive\n;;   [ X ] Draw game field with stone\n;;\n;; Refactor:\n;;   [   ] (def fix-move ...)\n;;   [ X ] (defn move-shape-to-in-field [direction shape field]\n;;   [ X ] merge :rotate-stone & :move-stone\n;;\n\n\n\n;;<\n;; Func\n;;>\n;;\n\n;; matrix utils\n(defn empty-matrix-nm [n m]\n  (let [line (->> (repeat 0) (take n) vec)]\n    (->> (repeat line) (take m) vec)))\n\n(defn rotate-matrix [m]\n  (let [transpose (fn [v] (mapv (fn [ind] (mapv #(get % ind)\n                                                (filter #(contains? % ind) v)))\n                                (->> (map count v) (apply max) range)))\n        transposed (transpose m)]\n    (vec (map (fn [v] (-> v reverse vec)) transposed))))\n\n(defn clear-matrix [m]\n  (let [pure-m (remove #(every? #{1} %) m)\n        zero-row (take (-> m first count) (repeat 0))\n        zero-m (take (- (count m) (count pure-m)) (repeat zero-row))]\n    (mapv vec (concat zero-m pure-m))))\n\n(defn merge-matrices [dst src origin]\n  (loop [y (-> origin last dec) src src dst dst]\n    (if (empty? src)\n      dst\n      (recur\n       (inc y)\n       (rest src)\n       (update dst\n               y\n               (fn [v]\n                 (let [f (first src)\n                       pre (take (dec (first origin)) (repeat 0))\n                       post (take (- (count v) (+ (count pre) (count f)))\n                                  (repeat 0))\n                       f2 (vec (flatten [pre f post]))]\n                   (mapv (fn [v f] (if (= 1 f) f v)) v f2))))))))\n\n(defn relative-coordinates [[x y] matrix]\n  (loop [r []\n         row (first matrix)\n         rest-rows (next matrix)]\n    (if (nil? row)\n      r\n      (let [coordinates (map\n                         (fn [a] [(+ x a)\n                                  (+ y (- (count matrix) (-> rest-rows count inc)))])\n                         (range (count row)))]\n        (recur (apply conj r (remove nil? coordinates))\n               (first rest-rows)\n               (next rest-rows))))))\n\n(defn can-merge-matrices-without-loses [dst src origin]\n  (let [src-crds (relative-coordinates origin src)\n        offset-x (get-in src-crds [0 0])\n        offset-y (get-in src-crds [0 1])]\n    (every? true?\n            (map (fn [[x y]]\n                   (let [src-value (get-in src [(- y offset-y) (- x offset-x)])\n                         dst-value (get-in dst [(dec y) (dec x)])]\n                     (cond\n                       (and (= 1 src-value) (nil? dst-value)) false\n                       (= 1 dst-value src-value) false\n                       :else true)))\n                 src-crds))))\n\n;; stone utils\n(def tetrominoes\n  [[[1]]\n   [[1 1 1 1]]\n   [[1 1] [1 1]]\n   [[1 1] [1 0] [1 0]]\n   [[1 1] [0 1] [0 1]]\n   [[0 1 1] [1 1 0]]\n   [[1 1 0] [0 1 1]]\n   [[1 1 1] [0 1 0]]])\n\n(defn create-stone\n  ([]\n   {:crd [1 1]\n    :shape (get tetrominoes\n                (-> tetrominoes count rand-int))})\n  ([n]\n   {:crd [1 1]\n    :shape (get tetrominoes n (get tetrominoes 0))}))\n\n(defn move-stone [stone direction]\n  (let [l (fn [stone] (update-in stone [:crd 0] #(dec %)))\n        r (fn [stone] (update-in stone [:crd 0] #(inc %)))\n        d (fn [stone] (update-in stone [:crd 1] #(inc %)))\n        t (fn [stone] (update stone :shape (fn [m] (rotate-matrix m))))\n        mover (case direction :left l :right r :down d :rotate t)]\n    (mover stone)))\n\n(defn can-move-stone-within-rock-to-direction [rock stone dir]\n  (let [new-stone (move-stone stone dir)\n        shape (:shape new-stone)\n        origin (:crd new-stone)]\n    (when (can-merge-matrices-without-loses rock shape origin)\n      new-stone)))\n\n\n;<\n;; Events\n;;>\n\n;; todo refactor\n;; (def fix-move\n;;   (rf/enrich\n;;    (fn [db [_ _]]\n;;      (let [rock (:rock db)\n;;            stone (get-in db [:stones 0])\n;;            new-stone (move-stone stone)]\n;;\n;;  ;; -> IF can't move down and need fix state\n;;        (if (nil? new-crd)\n;;          (let [\n;;                ;; add new stone to the queue\n;;                db0 (update db :stones (fn [s] (create-stone)))\n;\n;;                move stone from queue to the rock matrix\n;;                db1 (assoc db0\n;;                           :rock\n;;                           (merge-matrices rock (:shape stone) (:crd stone)))\n;\n;;                remove solid lines\n;;                db2 (assoc db1 :rock (clear-matrix (:rock db0)))\n;;\n;;                ] db2)\n;;\n;;  ;; -> ELSE do noting\n;;  db)))))\n\n;; todo refactor\n(rf/reg-event-db\n :move-stone\n; [fix-move]\n (fn [db [_ dir]]\n   (let [rock (:rock db)\n         stone (get-in db [:stones 0])]\n     (when-let [stone (can-move-stone-within-rock-to-direction rock stone dir)]\n       (assoc-in db [:stones 0] stone)))))\n\n;;<\n;; Game stages\n;;>\n\n(rf/reg-event-db\n :init-rock\n (fn [db]\n   (let [db\n         (assoc db\n                :rock\n                (empty-matrix-nm (-> db :frame first)\n                                 (-> db :frame last)))\n\n         db (assoc-in db [:rock 5 5] 1)\n         db (assoc-in db [:rock 5 7] 1)]\n     db)))\n\n(rf/reg-event-db\n :init-stones\n (fn [db]\n   (let [stones [(create-stone 4) (create-stone 5)]]\n     (assoc db :stones stones))))\n\n(rf/reg-event-fx              ;; -fx registration, not -db registration\n :init-game\n (fn [cofx [act _]]        ;; 1st argument is coeffects, instead of db\n   {:db       (update (:db cofx) act (fn [v] (inc v)))\n    :fx       [[:dispatch [:init-rock]]\n               [:dispatch [:init-stones]]]}))\n\n(defn key-rules-move-tetris []\n  (rf/dispatch\n   [::rp/set-keydown-rules\n    {:event-keys [[[:move-stone :rotate] [{:keyCode 87}]]\n                  [[:move-stone :down] [{:keyCode 83}]]\n                  [[:move-stone :left] [{:keyCode 65}]]\n                  [[:move-stone :right] [{:keyCode 68}]]]\n     :clear-keys [[;;escape\n                   {:keyCode 27}]]}]))\n;;<\n;; Subs\n;;>\n(rf/reg-sub\n :rock\n (fn [db]\n   (:rock db)))\n\n(rf/reg-sub\n :stones\n (fn [db]\n   (:stones db)))\n\n(rf/reg-sub\n :stone\n (fn []\n   [(rf/subscribe [:stones])])\n (fn [[stones]]\n   (first stones)))\n\n(rf/reg-sub\n :next-stone\n (fn []\n   [(rf/subscribe [:stones])])\n (fn [[stones]]\n   (let [stone (second stones)]\n     (merge-matrices (empty-matrix-nm 4 4) (:shape stone) #_[1 1] (:crd stone)))))\n\n(rf/reg-sub\n :game-field\n (fn []\n   [(rf/subscribe [:rock])\n    (rf/subscribe [:stone])])\n\n (fn [[rock stone]]\n   (let [stone-on-field (merge-matrices rock (:shape stone) (:crd stone))]\n     stone-on-field)))\n\n;;<\n;; View\n;;>\n\n(defn next-stone []\n  [:table\n   [:tbody\n    (for [frame @(rf/subscribe [:next-stone])]\n      [:tr {:key (rand-int 100000)}\n       (for [cell frame]\n         [:td {:key (rand-int 100000)}\n          (if (= 1 cell) \"+\" cell)])])]])\n\n(defn game-field []\n  [:table\n   [:tbody\n    (for [frame @(rf/subscribe [:game-field])]\n      [:tr {:key (rand-int 100000)}\n       (for [cell frame]\n         [:td {:key (rand-int 100000)}\n          (if (= 1 cell) \"+\" cell)])])]])\n\n(defn tetris-app []\n  [:div {:style {:color :black}}\n   [:h1 \"Tetris game\"]\n   [:ol\n    [:li \"Next\" [next-stone]]\n    [:li \"Field\" [game-field]]]])\n\n;;<\n;; Run\n;;>\n\n(key-rules-move-tetris)\n(rf/dispatch [:init-game])\n"]}